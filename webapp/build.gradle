buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://plugins.gradle.org/m2/" }
  }

  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
  }
}

repositories {
  maven { url "https://repo.spring.io/snapshot" }
  maven { url "https://repo.spring.io/milestone" }
}

apply plugin: 'kotlin-spring'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceSets {
  main {
    resources {
      srcDir "config/dev"
    }
  }
  test {
    resources {
      srcDir "config/test"
    }
  }
  integrationTest {
    kotlin {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir file('src/integrationTest/kotlin')
    }
  }
}

configurations {
  integrationTestCompile.extendsFrom testCompile
  integrationTestRuntime.extendsFrom testRuntime
}

task copyFrontendArtifacts(type: Copy) {
  dependsOn ':frontend:assemble'

  from "$rootDir/frontend/dist"
  into "${processResources.destinationDir}/static"
}

processResources.dependsOn(copyFrontendArtifacts)

task integrationTest(type: Test, dependsOn: []) {
  description = 'Runs integration tests.'
  group = 'verification'
  outputs.upToDateWhen { false }
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
}

task integrationTestWithDocker(dependsOn: [":agentsComposeBuild", ":cordaComposeBuild", ":backendsComposeBuild", ":agentsComposeUp", ":cordaComposeUp", ":backendsComposeUp", integrationTest, ":backendsComposeDown", ":cordaComposeDown", ":agentsComposeDown"]) {
  description = 'Start dockerised system and runs integration tests.'
  group = 'verification'
}

integrationTest.mustRunAfter(":backendsComposeUp")

dependencies {

  // CorDapp dependencies
  // Specify your cordapp's dependencies below, including dependent cordapps
  compile project(':cordapp')

  // app specific deps
  compile 'com.corundumstudio.socketio:netty-socketio:1.7.13'

  //TODO: java.lang.ClassNotFoundException: javax.json.JsonValue fix
  compile("org.apache.activemq:artemis-core-client:2.2.0") {
    force = true
  }
  compile("org.apache.activemq:artemis-commons:2.2.0") {
    force = true
  }
  compile("javax.json:javax.json-api")

  // Spring Boot
  compile('org.springframework.boot:spring-boot-starter')
  compile('org.springframework.boot:spring-boot-starter-web')
  testCompile('org.springframework.boot:spring-boot-starter-test')
  testCompile('org.springframework.boot:spring-boot-test')
}
