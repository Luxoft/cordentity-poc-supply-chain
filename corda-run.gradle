buildscript {
    repositories {
        jcenter()
        maven { url "https://software.r3.com/artifactory/corda-releases" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda:corda-common-logging:$corda_release_version"
        classpath "net.corda:corda-tools-network-bootstrapper:$corda_release_version"
    }
}

def RUN_CORDA_GROUP = "corda"
def profileRoot = "$rootDir/devops/profile/"
def profilePath = "$profileRoot/develop"
def nodesRoot = "$rootDir/build/nodes"
def nodeDirs = { new File(nodesRoot).listFiles().findAll { it.isDirectory() } }

apply plugin: 'kotlin'
jar.enabled = false

configurations {
    /** Dependencies that must be deployed into running Corda nodes */
    cordappDeploy {
        transitive = false
        extendsFrom implementation
    }
}

task killCordaProcesses(type: Exec, group: RUN_CORDA_GROUP) {
    commandLine "bash", "-c", 'kill `pgrep xterm` && sleep 5; kill -9 `jps | grep "Corda\\|unavailable" | cut -d " " -f 1`; true'
}

task copyNodeFiles(group: RUN_CORDA_GROUP) {
    afterEvaluate {
        //Assembling project dependencies
        for (dependency in configurations.cordappDeploy.allDependencies) {
            if (dependency instanceof ProjectDependency) {
                dependsOn "$dependency.dependencyProject.name:assemble"
            }
        }
    }
    doFirst {
        //Node directories
        copy {
            from "$profilePath/nodes"
            into "$rootDir/build/nodes"
        }
        for (nodeDir in nodeDirs()) {
            //Corda exec jar and docker file
            copy {
                from "$profilePath/Dockerfile-corda"
                from(configurations.cordappDeploy) {
                    include("corda-${corda_release_version}.jar")
                    rename "corda-${corda_release_version}.jar", "corda.jar"
                }
                into nodeDir
            }
            //Indy genesis
            copy {
                from "$profilePath/genesis"
                into "$nodeDir/genesis"
            }
            //Cordapp default configs
            copy {
                from "${profilePath}/config"
                into "$nodeDir/cordapps/config"
            }
            //External node info
            copy {
                from "${profilePath}/additional-node-infos"
                into "$nodeDir/additional-node-infos"
            }
        }
        //Node configs overwrite
        copy {
            from "$profilePath/nodes"
            into "$rootDir/build/nodes"
        }
        // Cordapps are copied into nodesRoot -- the bootstrapper will
        // distribute these cordapps to nodes
        copy {
            from(configurations.cordappDeploy)
            into nodesRoot
        }
    }
}

task bootstrap(type: Exec, group: RUN_CORDA_GROUP) {
    dependsOn copyNodeFiles
    def jarPath = buildscript.configurations.classpath.resolve().find {
        it.name.startsWith("corda-tools-network-bootstrapper-")
    }
    commandLine "java", "-jar", "$jarPath", "--dir", "$rootDir/build/nodes"
}
